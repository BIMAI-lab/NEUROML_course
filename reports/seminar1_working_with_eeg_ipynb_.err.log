Traceback (most recent call last):
  File "/Users/rahmatullaev/Documents/projects/.venv/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/rahmatullaev/Documents/projects/.venv/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Users/rahmatullaev/Documents/projects/.venv/lib/python3.13/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/rahmatullaev/Documents/projects/.venv/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.2/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Users/rahmatullaev/Documents/projects/.venv/lib/python3.13/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Users/rahmatullaev/Documents/projects/.venv/lib/python3.13/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/rahmatullaev/Documents/projects/.venv/lib/python3.13/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
sample = mne.io.read_raw_edf('S003R03.edf', verbose=False, preload=True)
------------------


[31m---------------------------------------------------------------------------[39m
[31mFileNotFoundError[39m                         Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[7][39m[32m, line 1[39m
[32m----> [39m[32m1[39m sample = [43mmne[49m[43m.[49m[43mio[49m[43m.[49m[43mread_raw_edf[49m[43m([49m[33;43m'[39;49m[33;43mS003R03.edf[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43mverbose[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m[43m [49m[43mpreload[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m

[36mFile [39m[32m~/Documents/projects/.venv/lib/python3.13/site-packages/mne/io/edf/edf.py:1700[39m, in [36mread_raw_edf[39m[34m(input_fname, eog, misc, stim_channel, exclude, infer_types, include, preload, units, encoding, exclude_after_unique, verbose)[39m
[32m   1698[39m [38;5;28;01mif[39;00m ext != [33m"[39m[33medf[39m[33m"[39m:
[32m   1699[39m     [38;5;28;01mraise[39;00m [38;5;167;01mNotImplementedError[39;00m([33mf[39m[33m"[39m[33mOnly EDF files are supported, got [39m[38;5;132;01m{[39;00mext[38;5;132;01m}[39;00m[33m.[39m[33m"[39m)
[32m-> [39m[32m1700[39m [38;5;28;01mreturn[39;00m [43mRawEDF[49m[43m([49m
[32m   1701[39m [43m    [49m[43minput_fname[49m[43m=[49m[43minput_fname[49m[43m,[49m
[32m   1702[39m [43m    [49m[43meog[49m[43m=[49m[43meog[49m[43m,[49m
[32m   1703[39m [43m    [49m[43mmisc[49m[43m=[49m[43mmisc[49m[43m,[49m
[32m   1704[39m [43m    [49m[43mstim_channel[49m[43m=[49m[43mstim_channel[49m[43m,[49m
[32m   1705[39m [43m    [49m[43mexclude[49m[43m=[49m[43mexclude[49m[43m,[49m
[32m   1706[39m [43m    [49m[43minfer_types[49m[43m=[49m[43minfer_types[49m[43m,[49m
[32m   1707[39m [43m    [49m[43mpreload[49m[43m=[49m[43mpreload[49m[43m,[49m
[32m   1708[39m [43m    [49m[43minclude[49m[43m=[49m[43minclude[49m[43m,[49m
[32m   1709[39m [43m    [49m[43munits[49m[43m=[49m[43munits[49m[43m,[49m
[32m   1710[39m [43m    [49m[43mencoding[49m[43m=[49m[43mencoding[49m[43m,[49m
[32m   1711[39m [43m    [49m[43mexclude_after_unique[49m[43m=[49m[43mexclude_after_unique[49m[43m,[49m
[32m   1712[39m [43m    [49m[43mverbose[49m[43m=[49m[43mverbose[49m[43m,[49m
[32m   1713[39m [43m[49m[43m)[49m

[36mFile [39m[32m<decorator-gen-330>:10[39m, in [36m__init__[39m[34m(self, input_fname, eog, misc, stim_channel, exclude, infer_types, preload, include, units, encoding, exclude_after_unique, verbose)[39m

[36mFile [39m[32m~/Documents/projects/.venv/lib/python3.13/site-packages/mne/io/edf/edf.py:152[39m, in [36mRawEDF.__init__[39m[34m(self, input_fname, eog, misc, stim_channel, exclude, infer_types, preload, include, units, encoding, exclude_after_unique, verbose)[39m
[32m    150[39m logger.info([33mf[39m[33m"[39m[33mExtracting EDF parameters from [39m[38;5;132;01m{[39;00minput_fname[38;5;132;01m}[39;00m[33m...[39m[33m"[39m)
[32m    151[39m input_fname = os.path.abspath(input_fname)
[32m--> [39m[32m152[39m info, edf_info, orig_units = [43m_get_info[49m[43m([49m
[32m    153[39m [43m    [49m[43minput_fname[49m[43m,[49m
[32m    154[39m [43m    [49m[43mstim_channel[49m[43m,[49m
[32m    155[39m [43m    [49m[43meog[49m[43m,[49m
[32m    156[39m [43m    [49m[43mmisc[49m[43m,[49m
[32m    157[39m [43m    [49m[43mexclude[49m[43m,[49m
[32m    158[39m [43m    [49m[43minfer_types[49m[43m,[49m
[32m    159[39m [43m    [49m[43mpreload[49m[43m,[49m
[32m    160[39m [43m    [49m[43minclude[49m[43m,[49m
[32m    161[39m [43m    [49m[43mexclude_after_unique[49m[43m,[49m
[32m    162[39m [43m[49m[43m)[49m
[32m    163[39m logger.info([33m"[39m[33mCreating raw.info structure...[39m[33m"[39m)
[32m    165[39m _validate_type(units, ([38;5;28mstr[39m, [38;5;28;01mNone[39;00m, [38;5;28mdict[39m), [33m"[39m[33munits[39m[33m"[39m)

[36mFile [39m[32m~/Documents/projects/.venv/lib/python3.13/site-packages/mne/io/edf/edf.py:541[39m, in [36m_get_info[39m[34m(fname, stim_channel, eog, misc, exclude, infer_types, preload, include, exclude_after_unique)[39m
[32m    538[39m eog = eog [38;5;28;01mif[39;00m eog [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m []
[32m    539[39m misc = misc [38;5;28;01mif[39;00m misc [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m []
[32m--> [39m[32m541[39m edf_info, orig_units = [43m_read_header[49m[43m([49m
[32m    542[39m [43m    [49m[43mfname[49m[43m,[49m[43m [49m[43mexclude[49m[43m,[49m[43m [49m[43minfer_types[49m[43m,[49m[43m [49m[43minclude[49m[43m,[49m[43m [49m[43mexclude_after_unique[49m
[32m    543[39m [43m[49m[43m)[49m
[32m    545[39m [38;5;66;03m# XXX: `tal_ch_names` to pass to `_check_stim_channel` should be computed[39;00m
[32m    546[39m [38;5;66;03m#      from `edf_info['ch_names']` and `edf_info['tal_idx']` but 'tal_idx'[39;00m
[32m    547[39m [38;5;66;03m#      contains stim channels that are not TAL.[39;00m
[32m    548[39m stim_channel_idxs, _ = _check_stim_channel(stim_channel, edf_info[[33m"[39m[33mch_names[39m[33m"[39m])

[36mFile [39m[32m~/Documents/projects/.venv/lib/python3.13/site-packages/mne/io/edf/edf.py:515[39m, in [36m_read_header[39m[34m(fname, exclude, infer_types, include, exclude_after_unique)[39m
[32m    513[39m logger.info([33mf[39m[33m"[39m[38;5;132;01m{[39;00mext.upper()[38;5;132;01m}[39;00m[33m file detected[39m[33m"[39m)
[32m    514[39m [38;5;28;01mif[39;00m ext [38;5;129;01min[39;00m ([33m"[39m[33mbdf[39m[33m"[39m, [33m"[39m[33medf[39m[33m"[39m):
[32m--> [39m[32m515[39m     [38;5;28;01mreturn[39;00m [43m_read_edf_header[49m[43m([49m
[32m    516[39m [43m        [49m[43mfname[49m[43m,[49m[43m [49m[43mexclude[49m[43m,[49m[43m [49m[43minfer_types[49m[43m,[49m[43m [49m[43minclude[49m[43m,[49m[43m [49m[43mexclude_after_unique[49m
[32m    517[39m [43m    [49m[43m)[49m
[32m    518[39m [38;5;28;01melif[39;00m ext == [33m"[39m[33mgdf[39m[33m"[39m:
[32m    519[39m     [38;5;28;01mreturn[39;00m _read_gdf_header(fname, exclude, include), [38;5;28;01mNone[39;00m

[36mFile [39m[32m~/Documents/projects/.venv/lib/python3.13/site-packages/mne/io/edf/edf.py:809[39m, in [36m_read_edf_header[39m[34m(fname, exclude, infer_types, include, exclude_after_unique)[39m
[32m    806[39m [38;5;250m[39m[33;03m"""Read header information from EDF+ or BDF file."""[39;00m
[32m    807[39m edf_info = {[33m"[39m[33mevents[39m[33m"[39m: []}
[32m--> [39m[32m809[39m [38;5;28;01mwith[39;00m [38;5;28;43mopen[39;49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mrb[39;49m[33;43m"[39;49m[43m)[49m [38;5;28;01mas[39;00m fid:
[32m    810[39m     fid.read([32m8[39m)  [38;5;66;03m# version (unused here)[39;00m
[32m    812[39m     [38;5;66;03m# patient ID[39;00m

[31mFileNotFoundError[39m: [Errno 2] No such file or directory: '/Users/rahmatullaev/Documents/projects/NEUROML_course/S003R03.edf'

